#+TITLE: Rust Challenges
#+DESCRIPTION: Các Challenges hàng tuần - có giải thưởng.
#+AUTHOR: Dang Quang Vu
#+EMAIL: eamondang@gmail.com

#+begin_quote
+ Trò chơi giải thuật toán với giải thưởng được tổ chức hàng tuần trên [[https://discord.gg/MwQSTmuV5w][Rustaceans Communication]]
+ Trao giải trực tiếp qua livestream trên VBI vào cuối tuần trên [[https://www.youtube.com/@VBIBlockchainAcademy][VBI Channel]]
+ Hình thức sẽ chọn ra bạn có điểm benchmark cao nhất trong các solution.
+ Cách thức nộp bài sẽ nộp dưới dạng merge git vào branch tương ứng.
#+end_quote

* Challenges :TOC:
- [[#challenge-1---strobogrammatic-find---week-1][Challenge 1 - Strobogrammatic Find - Week 1]]
  - [[#đề-bài][Đề bài]]
  - [[#module-tests][Module tests]]

* Challenge 1 - Strobogrammatic Find - Week 1
** Đề bài
+ Cho hai chuỗi số low và high, hãy tìm tất cả các số strobogrammatic nằm trong khoảng từ low đến high.
#+begin_quote
+ Một số được gọi là *strobogrammatic* nếu nó có thể được quay 180 độ và trông giống như chính nó. Các chữ số strobogrammatic là 0, 1, 6, 8, 9.
+ Lưu ý rằng các số không thể có các chữ số dẫn đầu bằng 0, ví dụ như "00".
#+end_quote

Ví dụ:
+ Input: low = 50, high = 100
+ Output: 3
+ Giải thích: Các số strobogrammatic từ 50 đến 100 là ["69", "88", "96"], do đó kết quả trả về là 3.

+ 10 <= low <= 10000
+ 10 <= high <= 10000
+ low < high

Một số gợi ý:
+ Sử dụng đệ quy để tạo ra tất cả các số strobogrammatic có độ dài n.
+ Kiểm tra xem mỗi số có nằm trong khoảng từ low đến high không và đếm số lượng số thỏa mãn yêu cầu đó.

[[./src/week1/mod.rs][Week1 Strobogrammatic Numbers]]

** Module tests
#+begin_src rustic
#![allow(dead_code)]
pub mod discord_name;

struct Solution;

impl Solution {
  fn strobogrammatic_numbers(low: i32, high: i32) -> i32 {
    // ...
  }
}

#[cfg(test)]
mod tests {
  use super::*;

  #[test]
  fn one_strobogrammatic_numbers() {
    assert_eq!(Solution::strobogrammatic_numbers(50, 100), 3);
  }

  #[test]
  fn two_strobogrammatic_numbers() {
    assert_eq!(Solution::strobogrammatic_numbers(10, 100), 4);
  }

  #[test]
  fn three_strobogrammatic_numbers() {
    assert_eq!(Solution::strobogrammatic_numbers(10, 1000), 16);
  }

  #[test]
  fn four_strobogrammatic_numbers() {
    assert_eq!(Solution::strobogrammatic_numbers(200, 5000), 14);
  }

  #[test]
  fn five_strobogrammatic_numbers() {
    assert_eq!(Solution::strobogrammatic_numbers(100, 10000), 32);
  }

  #[test]
  #[should_panic]
  fn six_strobogrammatic_numbers() {
    assert_eq!(Solution::strobogrammatic_numbers(5, 10000), 32);
  }

  #[test]
  #[should_panic]
  fn seven_strobogrammatic_numbers() {
    assert_eq!(Solution::strobogrammatic_numbers(1000, 500), 32);
  }

  #[test]
  #[should_panic]
  fn eight_strobogrammatic_numbers() {
    assert_eq!(Solution::strobogrammatic_numbers(10, 10000), 32);
  }

  #[test]
  fn full_strobogrammatic_numbers() {
    assert_eq!(Solution::strobogrammatic_numbers(10, 10000), 36);
  }
}
#+end_src
